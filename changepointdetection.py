# -*- coding: utf-8 -*-
"""FinalChangePointDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_AVFCkv6_II6VKrPYITu0uFiSF380nSo
"""

class DateAggregator(object):
  
  def __init__(self):
    self.dates_times = []
    
  def update(self, tweet):
    self.dates_times.append(tweet["tweet_date"])
    
  def date_split(self):
    self.year_month_day_list = []
    for i in range(len(self.dates_times)-1,-1,-1):
      time_stamp = self.dates_times[i]
      if type(time_stamp) == str:
        first_split = time_stamp.split('-')
        second_split = first_split[2].split('T')
        self.year_month_day_list.append(int(first_split[0]+first_split[1]+second_split[0]))
        
    self.year_month_day_list = sorted(year_month_day_list)
    self.unique_days = list(set(year_month_day_list))
    
  def tweets_per_day(self):
    self.tweets_per_day = []
    for day in self.unique_days:
      self.tweets_per_day.append(self.year_month_day_list.count(day))
    
  def run(self):
    self.date_split()
    self.tweets_per_day()
    return self.tweets_per_day

class Plotter(object):
  
  def __init__(self, tweets_per_day):
    self.tweets_per_day = tweets_per_day
    
  def plot(self):
    import matplotlib.pyplot as plt
    import ruptures as rpt

    # generate signal
    n_bkps = 4  # number of breakpoints
    bkps = np.zeros(n_bkps)
    for b in bkps:
      index = np.random.randint(0, len(unique_days))
  
    tweets_per_day_array = np.asarray(tweets_per_day)
    x = range(0,len(tweets_per_day))
    y = tweets_per_day

    from scipy.signal import savgol_filter
    yhat_day = savgol_filter(y, int(len(tweets_per_day)/7), 4) # window size 100, polynomial order 1
    
    # change point detection
    model = "l2"  # "l1", "rbf", "linear", "normal", "ar"
    algo = rpt.Window(width=40, model=model).fit(tweets_per_day_array)
    my_bkps = algo.predict(n_bkps=3)

    # show results
    rpt.show.display(yhat_day, bkps, my_bkps, figsize=(10, 6))
    plt.show()

